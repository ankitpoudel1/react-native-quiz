{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/ankit/Documents/simpleApp/components/QuizBody.js\";\nimport React, { useEffect, useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport AnswerOption from \"./AnswerOption\";\nexport default function QuizBody(props) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentQuestion = _useState2[0],\n      setCurrentQuestion = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      questionAnswered = _useState4[0],\n      setQuestionAnswered = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      correctlyAnswered = _useState6[0],\n      setCorrectlyAnswered = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      questionChanged = _useState8[0],\n      setQuestionChanged = _useState8[1];\n\n  var question = props.questions[currentQuestion];\n  var answers = [];\n  var isCorrectAnswer = false;\n  console.log(question);\n\n  function renderAnswerRow() {\n    Object.keys(question.answers).forEach(function (key, index) {\n      if (this[key]) {\n        if (question['correct_answer'] == key) {\n          isCorrectAnswer = true;\n        }\n\n        answers.push(React.createElement(AnswerOption, {\n          key: key,\n          answerKey: key,\n          answer: this[key],\n          correctAnswer: question['correct_answer'],\n          setQuestionAnswered: setQuestionAnswered,\n          isCorrectAnswer: isCorrectAnswer,\n          setCorrectlyAnswered: setCorrectlyAnswered,\n          correctlyAnswered: correctlyAnswered,\n          questionAnswered: questionAnswered,\n          questionChanged: questionChanged,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 19\n          }\n        }));\n      }\n\n      isCorrectAnswer = false;\n    }, question.answers);\n    return answers;\n  }\n\n  function handleQuestionChange() {\n    if (currentQuestion < 10) {\n      setCurrentQuestion(currentQuestion + 1);\n      setQuestionChanged(true);\n    }\n  }\n\n  useEffect(function () {\n    if (questionChanged) {\n      setQuestionAnswered(false);\n      setQuestionChanged(false);\n    }\n  });\n  return React.createElement(View, {\n    style: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      height: '20%',\n      color: \"#fff\",\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, question.question)), React.createElement(View, {\n    style: {\n      height: '45%',\n      backgroundColor: '#024',\n      color: \"#4a4\",\n      margin: '4%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, renderAnswerRow(), React.createElement(View, {\n    style: {\n      color: 'white',\n      top: '60%',\n      left: '75%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    onPress: function onPress() {\n      handleQuestionChange();\n    },\n    style: {\n      color: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, \" Next >> \"))));\n}","map":{"version":3,"sources":["/home/ankit/Documents/simpleApp/components/QuizBody.js"],"names":["React","useEffect","useState","AnswerOption","QuizBody","props","currentQuestion","setCurrentQuestion","questionAnswered","setQuestionAnswered","correctlyAnswered","setCorrectlyAnswered","questionChanged","setQuestionChanged","question","questions","answers","isCorrectAnswer","console","log","renderAnswerRow","Object","keys","forEach","key","index","push","handleQuestionChange","height","width","backgroundColor","color","alignItems","justifyContent","margin","top","left"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport { Button, View ,Text} from 'react-native';\nimport AnswerOption from './AnswerOption';\nexport default function QuizBody(props){\n    const [currentQuestion,setCurrentQuestion] = useState(0);\n    const [questionAnswered,setQuestionAnswered] = useState(false);\n    const [correctlyAnswered,setCorrectlyAnswered] = useState(false);\n    const [questionChanged,setQuestionChanged] = useState(false);\n    const question = props.questions[currentQuestion];\n    let answers = [];\n    let isCorrectAnswer = false;\n    // console.log(Object.keys(question.answers).length);\n    console.log(question);\n    function renderAnswerRow(){\n    Object.keys(question.answers).forEach(function(key, index) {\n     if (this[key]){\n         if (question['correct_answer']==key){\n              isCorrectAnswer = true;\n         }\n     answers.push(<AnswerOption key={key} answerKey={key} answer={this[key]} correctAnswer={question['correct_answer']} \n                     setQuestionAnswered={setQuestionAnswered} isCorrectAnswer={isCorrectAnswer}\n                     setCorrectlyAnswered={setCorrectlyAnswered} correctlyAnswered={correctlyAnswered}\n                     questionAnswered={questionAnswered} questionChanged={questionChanged}\n     />)}\n         isCorrectAnswer = false;\n      }, question.answers);\n\n      return answers;\n    }\n\n    function handleQuestionChange(){\n        if (currentQuestion<10){\n            setCurrentQuestion(currentQuestion+1);\n            setQuestionChanged(true);\n        }\n    }\n\n    useEffect(()=>{\n        if (questionChanged){\n            setQuestionAnswered(false);\n            setQuestionChanged(false);\n        }\n    })\n\n    return (\n        <View style={{\n            height:'100%',\n            width:'100%',\n            backgroundColor:'#000',\n        }}>\n            <View style={{\n                 height:'20%',\n                //  width:'50%',\n                //  backgroundColor:'#067',\n                 color:\"#fff\",\n                 alignItems: 'center',\n                 justifyContent: 'center',\n            }}\n            \n            >\n                <Text style={{\n                    color:'white',\n                  \n                }}>{question.question}</Text>\n            </View>\n\n\n            <View style={{\n                    height:'45%',\n                    //  width:'50%',\n                     backgroundColor:'#024',\n                     color:\"#4a4\",\n                     margin: '4%',\n                    //  border: '2px solid #fff',\n            }}\n            >\n               \n            \n                {renderAnswerRow()}\n\n                <View style={{\n                    // position:'relative',\n                    color:'white',\n                    top:'60%',\n                    left:'75%'\n                }}>\n                    <Text\n                    onPress={()=>{handleQuestionChange()}}\n                    style={{\n                        color:'#fff'\n                    }}\n                    > Next >> </Text>\n                </View>\n                \n            </View>\n                \n\n        </View>\n    );\n}"]},"metadata":{},"sourceType":"module"}